{"version":3,"sources":["components/Header/Header.js","components/Book/Book.js","components/Shelf/Shelf.js","components/Shelves/Shelves.js","BooksAPI.js","components/Search/Search.js","components/SearchButton/SearchButton.js","App.js","index.js"],"names":["Header","react_default","a","createElement","className","React","Component","Book","_this","this","book","props","style","width","height","backgroundImage","concat","imageLinks","thumbnail","value","shelf","onChange","e","Moveto","target","disabled","title","authors","Shelf","booksInShelf","books","map","key","id","components_Book_Book","bookTitle","bookAuthor","bookshelf","onShelfChange","Shelves","allBooks","Books","console","log","currentlyReading","filter","wantToRead","read","components_Header_Header","components_Shelf_Shelf","shelfChanger","api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","then","res","json","data","update","method","Object","objectSpread","Content-Type","body","JSON","stringify","Search","state","booksOnDisplay","query","onShelfUpdate","shelfName","BooksAPI","updateIndex","findIndex","b","updateBook","setState","toConsumableArray","slice","_this2","_this3","updateQuery","results","length","searchResults","s","_this4","_this$state","react_router_dom","to","type","placeholder","searchBooks","index","color","SearchButton","Fragment","BooksApp","showSearchPage","updateSearchPage","react_router","exact","path","render","components_Search_Search","components_Shelves_Shelves","components_SearchButton_SearchButton","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.f15b7e27.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <div className='list-books-title'>\n        <h1>MyReads</h1>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React from \"react\";\n\nclass Book extends React.Component {\n  render() {\n    const book = this.props.book;\n    const noCoverImage = \"../img/no_cover_thumb.gif\";\n\n    return (\n      <div className='book'>\n        <div className='book-top'>\n          <div\n            className='book-cover'\n            style={{\n              width: 128,\n              height: 193,\n              backgroundImage: `url(${\n                book.imageLinks ? book.imageLinks.thumbnail : noCoverImage\n              })`,\n            }}\n          />\n          <div className='book-shelf-changer'>\n            <select\n              value={this.props.book.shelf}\n              onChange={(e) =>\n                this.props.Moveto(this.props.book, e.target.value)\n              }>\n              <option value='move' disabled>\n                Move to...\n              </option>\n              <option value='currentlyReading'>Currently Reading</option>\n              <option value='wantToRead'>Want to Read</option>\n              <option value='read'>Read</option>\n              <option value='none'>None</option>\n            </select>\n          </div>\n        </div>\n        <div className='book-title'>{this.props.book.title}</div>\n        <div className='book-authors'>{this.props.book.authors}</div>\n      </div>\n    );\n  }\n}\n\nexport default Book;\n","import React from \"react\";\nimport Book from \"../Book/Book\";\nclass Shelf extends React.Component {\n  render() {\n    const booksInShelf = this.props.books;\n    return (\n      <div className='bookshelf'>\n        <h2 className='bookshelf-title'>{this.props.title}</h2>\n        <div className='bookshelf-books'>\n          <ol className='books-grid'>\n            {booksInShelf.map((book) => (\n              <li key={book.id}>\n                <Book\n                  book={book}\n                  bookTitle={book.title}\n                  bookAuthor={book.authors}\n                  bookshelf={book.shelf}\n                  Moveto={this.props.onShelfChange}\n                />\n              </li>\n            ))}\n          </ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Shelf;\n","import React from \"react\";\nimport Header from \"../Header/Header\";\nimport Shelf from \"../Shelf/Shelf\";\n\nclass Shelves extends React.Component {\n  render() {\n    const allBooks = this.props.Books;\n    console.log(allBooks);\n    const currentlyReading = allBooks.filter(\n      (book) => book.shelf === \"currentlyReading\"\n    );\n    const wantToRead = allBooks.filter((book) => book.shelf === \"wantToRead\");\n    const read = allBooks.filter((book) => book.shelf === \"read\");\n\n    return (\n      <div className='list-books-content'>\n        <div>\n          <Header />\n\n          <Shelf\n            books={currentlyReading}\n            title='Currently Reading'\n            onShelfChange={this.props.shelfChanger}\n          />\n          <Shelf\n            books={wantToRead}\n            title='Want to Read'\n            onShelfChange={this.props.shelfChanger}\n          />\n          <Shelf\n            books={read}\n            title='Read'\n            onShelfChange={this.props.shelfChanger}\n          />\n          {/* <div className=\"bookshelf\">\n                <h2 className=\"bookshelf-title\">Want to Read</h2>\n                <div className=\"bookshelf-books\">\n                  <ol className=\"books-grid\">\n                    <li>\n                      <div className=\"book\">\n                        <div className=\"book-top\">\n                          <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: 'url(\"http://books.google.com/books/content?id=uu1mC6zWNTwC&printsec=frontcover&img=1&zoom=1&imgtk=AFLRE73pGHfBNSsJG9Y8kRBpmLUft9O4BfItHioHolWNKOdLavw-SLcXADy3CPAfJ0_qMb18RmCa7Ds1cTdpM3dxAGJs8zfCfm8c6ggBIjzKT7XR5FIB53HHOhnsT7a0Cc-PpneWq9zX&source=gbs_api\")' }}></div>\n                          <div className=\"book-shelf-changer\">\n                            <select>\n                              <option value=\"move\" disabled>Move to...</option>\n                              <option value=\"currentlyReading\">Currently Reading</option>\n                              <option value=\"wantToRead\">Want to Read</option>\n                              <option value=\"read\">Read</option>\n                              <option value=\"none\">None</option>\n                            </select>\n                          </div>\n                        </div>\n                        <div className=\"book-title\">1776</div>\n                        <div className=\"book-authors\">David McCullough</div>\n                      </div>\n                    </li>\n                    <li>\n                      <div className=\"book\">\n                        <div className=\"book-top\">\n                          <div className=\"book-cover\" style={{ width: 128, height: 192, backgroundImage: 'url(\"http://books.google.com/books/content?id=wrOQLV6xB-wC&printsec=frontcover&img=1&zoom=1&imgtk=AFLRE72G3gA5A-Ka8XjOZGDFLAoUeMQBqZ9y-LCspZ2dzJTugcOcJ4C7FP0tDA8s1h9f480ISXuvYhA_ZpdvRArUL-mZyD4WW7CHyEqHYq9D3kGnrZCNiqxSRhry8TiFDCMWP61ujflB&source=gbs_api\")' }}></div>\n                          <div className=\"book-shelf-changer\">\n                            <select>\n                              <option value=\"move\" disabled>Move to...</option>\n                              <option value=\"currentlyReading\">Currently Reading</option>\n                              <option value=\"wantToRead\">Want to Read</option>\n                              <option value=\"read\">Read</option>\n                              <option value=\"none\">None</option>\n                            </select>\n                          </div>\n                        </div>\n                        <div className=\"book-title\">Harry Potter and the Sorcerer's Stone</div>\n                        <div className=\"book-authors\">J.K. Rowling</div>\n                      </div>\n                    </li>\n                  </ol>\n                </div>\n              </div> */}\n          {/*  <div className=\"bookshelf\">\n                <h2 className=\"bookshelf-title\">Read</h2>\n                <div className=\"bookshelf-books\">\n                  <ol className=\"books-grid\">\n                    <li>\n                      <div className=\"book\">\n                        <div className=\"book-top\">\n                          <div className=\"book-cover\" style={{ width: 128, height: 192, backgroundImage: 'url(\"http://books.google.com/books/content?id=pD6arNyKyi8C&printsec=frontcover&img=1&zoom=1&imgtk=AFLRE70Rw0CCwNZh0SsYpQTkMbvz23npqWeUoJvVbi_gXla2m2ie_ReMWPl0xoU8Quy9fk0Zhb3szmwe8cTe4k7DAbfQ45FEzr9T7Lk0XhVpEPBvwUAztOBJ6Y0QPZylo4VbB7K5iRSk&source=gbs_api\")' }}></div>\n                          <div className=\"book-shelf-changer\">\n                            <select>\n                              <option value=\"move\" disabled>Move to...</option>\n                              <option value=\"currentlyReading\">Currently Reading</option>\n                              <option value=\"wantToRead\">Want to Read</option>\n                              <option value=\"read\">Read</option>\n                              <option value=\"none\">None</option>\n                            </select>\n                          </div>\n                        </div>\n                        <div className=\"book-title\">The Hobbit</div>\n                        <div className=\"book-authors\">J.R.R. Tolkien</div>\n                      </div>\n                    </li>\n                    <li>\n                      <div className=\"book\">\n                        <div className=\"book-top\">\n                          <div className=\"book-cover\" style={{ width: 128, height: 174, backgroundImage: 'url(\"http://books.google.com/books/content?id=1q_xAwAAQBAJ&printsec=frontcover&img=1&zoom=1&imgtk=AFLRE712CA0cBYP8VKbEcIVEuFJRdX1k30rjLM29Y-dw_qU1urEZ2cQ42La3Jkw6KmzMmXIoLTr50SWTpw6VOGq1leINsnTdLc_S5a5sn9Hao2t5YT7Ax1RqtQDiPNHIyXP46Rrw3aL8&source=gbs_api\")' }}></div>\n                          <div className=\"book-shelf-changer\">\n                            <select>\n                              <option value=\"move\" disabled>Move to...</option>\n                              <option value=\"currentlyReading\">Currently Reading</option>\n                              <option value=\"wantToRead\">Want to Read</option>\n                              <option value=\"read\">Read</option>\n                              <option value=\"none\">None</option>\n                            </select>\n                          </div>\n                        </div>\n                        <div className=\"book-title\">Oh, the Places You'll Go!</div>\n                        <div className=\"book-authors\">Seuss</div>\n                      </div>\n                    </li>\n                    <li>\n                      <div className=\"book\">\n                        <div className=\"book-top\">\n                          <div className=\"book-cover\" style={{ width: 128, height: 192, backgroundImage: 'url(\"http://books.google.com/books/content?id=32haAAAAMAAJ&printsec=frontcover&img=1&zoom=1&imgtk=AFLRE72yckZ5f5bDFVIf7BGPbjA0KYYtlQ__nWB-hI_YZmZ-fScYwFy4O_fWOcPwf-pgv3pPQNJP_sT5J_xOUciD8WaKmevh1rUR-1jk7g1aCD_KeJaOpjVu0cm_11BBIUXdxbFkVMdi&source=gbs_api\")' }}></div>\n                          <div className=\"book-shelf-changer\">\n                            <select>\n                              <option value=\"move\" disabled>Move to...</option>\n                              <option value=\"currentlyReading\">Currently Reading</option>\n                              <option value=\"wantToRead\">Want to Read</option>\n                              <option value=\"read\">Read</option>\n                              <option value=\"none\">None</option>\n                            </select>\n                          </div>\n                        </div>\n                        <div className=\"book-title\">The Adventures of Tom Sawyer</div>\n                        <div className=\"book-authors\">Mark Twain</div>\n                      </div>\n                    </li>\n                  </ol>\n                </div>\n              </div> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Shelves;\n","\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport * as BooksAPI from \"../../BooksAPI\";\nimport Book from \"../Book/Book\";\n\nclass Search extends React.Component {\n  state = {\n    books: [],\n    booksOnDisplay: [],\n    query: \"\",\n  };\n\n  componentDidMount() {\n    BooksAPI.getAll().then((allBooks) => {\n      this.setState({\n        booksOnDisplay: allBooks.filter((book) => book.shelf !== \"none\"),\n      });\n    });\n  }\n\n  updateQuery(query) {\n    this.setState({ query });\n  }\n  onShelfUpdate = (book, shelfName) => {\n    BooksAPI.update(book, shelfName);\n    const { books } = this.state;\n    const updateIndex = books.findIndex((b) => b.id === book.id);\n    const updateBook = books[updateIndex];\n    updateBook.shelf = shelfName;\n\n    this.setState({\n      books: [\n        ...books.slice(0, updateIndex),\n        updateBook,\n        ...books.slice(updateIndex + 1),\n      ],\n    });\n  };\n\n  searchBooks(query) {\n    const { booksOnDisplay } = this.state;\n    this.updateQuery(query);\n    if (query) {\n      BooksAPI.search(query, 20).then((results) => {\n        if (results && results.length > 0) {\n          let searchResults = results;\n          searchResults.map((book) => (book.shelf = \"none\"));\n          booksOnDisplay.map((book) => {\n            let updateIndex = searchResults.findIndex((s) => s.id === book.id);\n            if (searchResults[updateIndex]) {\n              searchResults[updateIndex].shelf = book.shelf;\n            }\n          });\n          this.setState({ books: searchResults });\n        } else {\n          this.setState({ books: [] });\n        }\n      });\n    } else {\n      this.setState({ books: [] });\n    }\n  }\n\n  render() {\n    const { books, query } = this.state;\n\n    return (\n      <div className='search-books'>\n        <div className='search-books-bar'>\n          <Link to='/'>\n            <button className='close-search'>Close</button>\n          </Link>\n          <div className='search-books-input-wrapper'>\n            {/*\n                  NOTES: The search from BooksAPI is limited to a particular set of search terms.\n                  You can find these search terms here:\n                  https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\n\n                  However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\n                  you don't find a specific author or title. Every search is limited by search terms.\n                */}\n            <input\n              type='text'\n              placeholder='Search by title or author'\n              onChange={(e) => this.searchBooks(e.target.value)}\n            />\n          </div>\n        </div>\n        <div className='search-books-results'>\n          <ol className='books-grid'>\n            {books.length > 0 ? (\n              books.map((book, index) => (\n                <Book key={index} book={book} Moveto={this.onShelfUpdate} />\n              ))\n            ) : query.length === 0 ? (\n              <h2 style={{ color: \"#fff\" }}>Search Some Books</h2>\n            ) : (\n              <p> Result Not Found</p>\n            )}\n          </ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass SearchButton extends Component {\n  render() {\n    return (\n      <>\n        <div className='open-search'>\n          <Link to='/search'>\n            <button>Add a book</button>\n          </Link>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default SearchButton;\n","import React from \"react\";\n// import * as BooksAPI from './BooksAPI'\nimport \"./App.css\";\nimport Shelves from \"./components/Shelves/Shelves\";\nimport Search from \"./components/Search/Search\";\nimport SearchButton from \"./components/SearchButton/SearchButton\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport { Route } from \"react-router-dom\";\n\nclass BooksApp extends React.Component {\n  state = {\n    /**\n     * TODO: Instead of using this state variable to keep track of which page\n     * we're on, use the URL in the browser's address bar. This will ensure that\n     * users can use the browser's back and forward buttons to navigate between\n     * pages, as well as provide a good URL they can bookmark and share.\n     */\n    showSearchPage: false,\n    books: [],\n  };\n\n  componentDidMount() {\n    BooksAPI.getAll().then((res) => this.setState({ books: res }));\n  }\n\n  updateSearchPage = (state) => {\n    this.setState({ showSearchPage: state });\n  };\n\n  onShelfUpdate = (book, shelfName) => {\n    const { books } = this.state;\n    const updateIndex = books.findIndex((b) => b.id === book.id);\n    const updateBook = books[updateIndex];\n    updateBook.shelf = shelfName;\n\n    this.setState({\n      books: [\n        ...books.slice(0, updateIndex),\n        updateBook,\n        ...books.slice(updateIndex + 1),\n      ],\n    });\n\n    BooksAPI.update(book, shelfName);\n  };\n\n  render() {\n    return (\n      <div className='app'>\n        <Route\n          exact\n          path='/search'\n          render={() => <Search showSearchPage={this.updateSearchPage} />}\n        />\n\n        <Route\n          exact\n          path='/'\n          render={() => (\n            <Shelves\n              Books={this.state.books}\n              shelfChanger={this.onShelfUpdate}\n            />\n          )}\n        />\n        <SearchButton showSearchPage={this.updateSearchPage} />\n      </div>\n    );\n  }\n}\n\nexport default BooksApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}